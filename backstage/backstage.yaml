---
apiVersion: v1
kind: Namespace
metadata:
  name: backstage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage-backend
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
      component: backend
  template:
    metadata:
      labels:
        app: backstage
        component: backend
    spec:
      containers:
        - name: backstage
          # It appears that if the node server is serving both the front-end and the back-end componets, so there's
          # no immediate need to bring in both frontend and backend images for the time being.
          image: wyattwalter/backstage-demo:a3a7aadef8ce6e204854187fc9454ed618468a30
          #args: [--config, k8s-config.yaml]

          env:
            # We set this to development to make the backend start with incomplete configuration. In a production
            # deployment you will want to make sure that you have a full configuration, and remove any plugins that
            # you are not using.
            - name: NODE_ENV
              value: development

            # This makes it possible for the app to reach the backend when serving through `kubectl proxy`
            # If you expose the service using for example an ingress controller, you should
            # switch this out or remove it.
            #
            # Note that we're not setting app.baseUrl here, as setting the base path is not working at the moment.
            # Further work is needed around the routing in the frontend or react-router before we can support that.
            - name: APP_CONFIG_backend_baseUrl
              value: http://localhost:7000

            - name: AUTH_GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: github
                  key: client_id
            - name: AUTH_GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: github
                  key: client_secret
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github
                  key: github_token

          ports:
            - name: http
              containerPort: 7000

          volumeMounts:
            - name: config-volume
              mountPath: /usr/src/app/app-config.production.yaml
              subPath: k8s-config.yaml
            - name: tmp-volume
              mountPath: /tmp/backstage
            - name: docker-socket
              mountPath: /var/run/docker.sock

          resources:
            limits:
              memory: 0.5Gi

          readinessProbe:
            httpGet:
              port: 7000
              path: /healthcheck
          livenessProbe:
            httpGet:
              port: 7000
              path: /healthcheck

      volumes:
        - name: config-volume
          configMap:
            name: backstage-config
            items:
              - key: app-config
                path: k8s-config.yaml
        - name: tmp-volume
          hostPath:
            path: /tmp/backstage
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: backstage
data:
  # Note that the config here is only applied to the backend. The frontend config is applied at build time.
  # To override frontend config in this deployment, use `APP_CONFIG_` env vars.
  app-config: |
    backend:
      database:
        client: sqlite3
        connection: ':memory:'
      proxy:
        '/argocd/api':
          target: https://argocd-server.argocd.svc.cluster.local:8443/api/v1/
          changeOrigin: true
          # only if your argocd api has self-signed cert
          secure: false
---
apiVersion: v1
kind: Service
metadata:
  name: backstage-backend
  namespace: backstage
spec:
  type: LoadBalancer
  selector:
    app: backstage
    component: backend
  ports:
    - name: backend
      port: 7000
      protocol: TCP
      targetPort: 7000
    - name: frontend
      port: 3000
      protocol: TCP
      targetPort: 7000
